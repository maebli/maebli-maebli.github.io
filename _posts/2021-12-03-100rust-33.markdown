---
layout: post
title:  "Rust challenge 33/100 - advent of code 2021 day 3 part 1"
date:   2021-12-02 21:00:00 +0100
categories: rust
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [33rd Challenge](#33rd-challenge)
	- [Challenge](#challenge)
	- [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->
![](/assets/img/aoc.png)
## What is this :grey_question: 

The rules of the game are explained [in my original post](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 33rd Challenge
### Challenge

Today I'm solving today's [AoC day 3 2021](ttps://adventofcode.com/2021/day/1). So far only part one is done. Part two coming soon.. :sweat:.


### Solution :white_check_mark:

	{% highlight rust %}
	fn main() {

	    let x:Vec<Vec<_>> = DIAGNOSTIC_REPORT.lines()
	        .map(|l| {
	            l.as_bytes()
	                .into_iter()
	                .map(|x|*x == b'1')
	                .collect()
	        })
	        .collect();

	    let length = x.len() as u32;

	    let bit_count = x
	        .iter()
	        .fold(vec![0; length as usize], |acc:Vec<u32>, inst|{
	        acc
	            .iter().zip(inst.iter())
	            .map(|x| {match x.1
	                {
	                    true =>{ *x.0 + 1},
	                    false => *x.0
	            }})
	            .collect()
	    });

	    println!("{:?}",bit_count);

	    let gamma= bit_count.iter()
	        .map(|x|{ (*x > length/2) as u32})
	        .rev()
	        .enumerate()
	        .fold(0,|acc, inst|{
	            acc | (inst.1 << (inst.0 as u32))
	            }
	        );

	    let epsilon = (!gamma) & 0b111111111111;
	    println!("{}*{} = {}",gamma,epsilon,gamma*epsilon);

	}

	const DIAGNOSTIC_REPORT:&str ="00100
	11110
	10110
	10111
	10101
	01111
	00111
	11100
	10000
	11001
	00010
	01010";
	{% endhighlight %}


To see the full source see [github](https://github.com/maebli/100rustsnippets/tree/master/aoc-2021-day3) and see the live demo in [playground](https://play.rust-lang.org/?version=stable&edition=2021&gist=1843da9bd20744f2ef94f8bd5cee0f61). 

