---
layout: post
title:  "Rust challenge 56/100 - first steps with stm32wl and rust"
date:   2022-09-25 18:30:00 +0100
categories: rust
---


#  Table of content
<!-- MarkdownTOC autolink="true" -->

- [What is this :grey_question:](#what-is-this-grey_question)
- [56th Challenge](#56th-challenge)
    - [Challenge](#challenge)
    - [Solution :white_check_mark:](#solution-white_check_mark)

<!-- /MarkdownTOC -->

## What is this :grey_question: 

The rules of the game are explained [in my original](https://maebli.github.io/rust/2021/10/18/100rust.html). 

## 56th Challenge
### Challenge

Prepare for using stm32wl and rust, so that it easy to run. See how to get setup and run a basic example.
![](/assets/img/stm32wl.png)

### Solution :white_check_mark:

Lets start from a template:

    {% highlight bash %}
    cargo generate \
    --git https://github.com/stm32-rs/stm32wlxx-hal\
    --name stm32
    {% endhighlight %}

The template, looks like this, when running `tree -L 3`

    {% highlight bash %}
    .
    ├── CHANGELOG.md
    ├── Cargo.lock
    ├── Cargo.toml
    ├── LICENSE-APACHE
    ├── LICENSE-MIT
    ├── README.md
    ├── examples
    │   ├── Cargo.toml
    │   ├── examples
    │   └── src
    ├── hal
    │   ├── Cargo.toml
    │   └── src
    ├── lora-e5-bsp
    │   ├── Cargo.toml
    │   ├── README.md
    │   └── src
    ├── memory.x
    ├── nucleo-wl55jc-bsp
    │   ├── Cargo.toml
    │   ├── README.md
    │   └── src
    ├── rustfmt.toml
    └── testsuite
        ├── Cargo.toml
        ├── README.md
        ├── runall.py
        └── src
    {% endhighlight %}


Next run `DEFMT_LOG=trace cargo run-ex gpio-blink` in the top level directory which will run something along the lines of 
`probe-run --chip STM32WLE5JCIx --connect-under-reset target/thumbv7em-none-eabi/debug/examples/gpio-blink`



 See the repo on [github](https://github.com/maebli/100rustsnippets/tree/master/stm32wl)
